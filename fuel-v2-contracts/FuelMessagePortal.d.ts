/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  Contract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface FuelMessagePortalInterface extends ethers.utils.Interface {
  functions: {
    "ETH_DECIMALS()": FunctionFragment;
    "FUEL_BASE_ASSET_DECIMALS()": FunctionFragment;
    "MAX_MESSAGE_DATA_SIZE()": FunctionFragment;
    "SIDECHAIN_CONSENSUS()": FunctionFragment;
    "getFuelBaseAssetDecimals()": FunctionFragment;
    "getMessageSender()": FunctionFragment;
    "owner()": FunctionFragment;
    "pause()": FunctionFragment;
    "paused()": FunctionFragment;
    "relayMessageFromFuelBlock(tuple,tuple,tuple,bytes)": FunctionFragment;
    "relayMessageFromPrevFuelBlock(tuple,tuple,tuple,tuple,tuple,bytes)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "s_incomingMessageSuccessful(bytes32)": FunctionFragment;
    "s_incomingMessageTimelock()": FunctionFragment;
    "s_outgoingMessageNonce()": FunctionFragment;
    "sendETH(bytes32)": FunctionFragment;
    "sendMessage(bytes32,bytes)": FunctionFragment;
    "setIncomingMessageTimelock(uint64)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "unpause()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "ETH_DECIMALS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "FUEL_BASE_ASSET_DECIMALS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_MESSAGE_DATA_SIZE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "SIDECHAIN_CONSENSUS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getFuelBaseAssetDecimals",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMessageSender",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "relayMessageFromFuelBlock",
    values: [
      {
        sender: BytesLike;
        recipient: BytesLike;
        nonce: BytesLike;
        amount: BigNumberish;
        data: BytesLike;
      },
      {
        prevRoot: BytesLike;
        height: BigNumberish;
        timestamp: BigNumberish;
        daHeight: BigNumberish;
        txCount: BigNumberish;
        outputMessagesCount: BigNumberish;
        txRoot: BytesLike;
        outputMessagesRoot: BytesLike;
      },
      { key: BigNumberish; proof: BytesLike[] },
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "relayMessageFromPrevFuelBlock",
    values: [
      {
        sender: BytesLike;
        recipient: BytesLike;
        nonce: BytesLike;
        amount: BigNumberish;
        data: BytesLike;
      },
      {
        prevRoot: BytesLike;
        height: BigNumberish;
        timestamp: BigNumberish;
        applicationHash: BytesLike;
      },
      {
        prevRoot: BytesLike;
        height: BigNumberish;
        timestamp: BigNumberish;
        daHeight: BigNumberish;
        txCount: BigNumberish;
        outputMessagesCount: BigNumberish;
        txRoot: BytesLike;
        outputMessagesRoot: BytesLike;
      },
      { key: BigNumberish; proof: BytesLike[] },
      { key: BigNumberish; proof: BytesLike[] },
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "s_incomingMessageSuccessful",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "s_incomingMessageTimelock",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "s_outgoingMessageNonce",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "sendETH", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "sendMessage",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setIncomingMessageTimelock",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "ETH_DECIMALS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "FUEL_BASE_ASSET_DECIMALS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_MESSAGE_DATA_SIZE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "SIDECHAIN_CONSENSUS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFuelBaseAssetDecimals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMessageSender",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "relayMessageFromFuelBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "relayMessageFromPrevFuelBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "s_incomingMessageSuccessful",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "s_incomingMessageTimelock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "s_outgoingMessageNonce",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "sendETH", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "sendMessage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setIncomingMessageTimelock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
    "Paused(address)": EventFragment;
    "SentMessage(bytes32,bytes32,uint64,uint64,bytes)": EventFragment;
    "Unpaused(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SentMessage"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
}

export class FuelMessagePortal extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: FuelMessagePortalInterface;

  functions: {
    ETH_DECIMALS(overrides?: CallOverrides): Promise<[BigNumber]>;

    "ETH_DECIMALS()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    FUEL_BASE_ASSET_DECIMALS(overrides?: CallOverrides): Promise<[BigNumber]>;

    "FUEL_BASE_ASSET_DECIMALS()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    MAX_MESSAGE_DATA_SIZE(overrides?: CallOverrides): Promise<[BigNumber]>;

    "MAX_MESSAGE_DATA_SIZE()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    SIDECHAIN_CONSENSUS(overrides?: CallOverrides): Promise<[string]>;

    "SIDECHAIN_CONSENSUS()"(overrides?: CallOverrides): Promise<[string]>;

    getFuelBaseAssetDecimals(overrides?: CallOverrides): Promise<[number]>;

    "getFuelBaseAssetDecimals()"(overrides?: CallOverrides): Promise<[number]>;

    getMessageSender(overrides?: CallOverrides): Promise<[string]>;

    "getMessageSender()"(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    "owner()"(overrides?: CallOverrides): Promise<[string]>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "pause()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    "paused()"(overrides?: CallOverrides): Promise<[boolean]>;

    relayMessageFromFuelBlock(
      message: {
        sender: BytesLike;
        recipient: BytesLike;
        nonce: BytesLike;
        amount: BigNumberish;
        data: BytesLike;
      },
      blockHeader: {
        prevRoot: BytesLike;
        height: BigNumberish;
        timestamp: BigNumberish;
        daHeight: BigNumberish;
        txCount: BigNumberish;
        outputMessagesCount: BigNumberish;
        txRoot: BytesLike;
        outputMessagesRoot: BytesLike;
      },
      messageInBlockProof: { key: BigNumberish; proof: BytesLike[] },
      poaSignature: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "relayMessageFromFuelBlock((bytes32,bytes32,bytes32,uint64,bytes),(bytes32,uint64,uint64,uint64,uint64,uint64,bytes32,bytes32),(uint256,bytes32[]),bytes)"(
      message: {
        sender: BytesLike;
        recipient: BytesLike;
        nonce: BytesLike;
        amount: BigNumberish;
        data: BytesLike;
      },
      blockHeader: {
        prevRoot: BytesLike;
        height: BigNumberish;
        timestamp: BigNumberish;
        daHeight: BigNumberish;
        txCount: BigNumberish;
        outputMessagesCount: BigNumberish;
        txRoot: BytesLike;
        outputMessagesRoot: BytesLike;
      },
      messageInBlockProof: { key: BigNumberish; proof: BytesLike[] },
      poaSignature: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    relayMessageFromPrevFuelBlock(
      message: {
        sender: BytesLike;
        recipient: BytesLike;
        nonce: BytesLike;
        amount: BigNumberish;
        data: BytesLike;
      },
      rootBlockHeader: {
        prevRoot: BytesLike;
        height: BigNumberish;
        timestamp: BigNumberish;
        applicationHash: BytesLike;
      },
      blockHeader: {
        prevRoot: BytesLike;
        height: BigNumberish;
        timestamp: BigNumberish;
        daHeight: BigNumberish;
        txCount: BigNumberish;
        outputMessagesCount: BigNumberish;
        txRoot: BytesLike;
        outputMessagesRoot: BytesLike;
      },
      blockInHistoryProof: { key: BigNumberish; proof: BytesLike[] },
      messageInBlockProof: { key: BigNumberish; proof: BytesLike[] },
      poaSignature: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "relayMessageFromPrevFuelBlock((bytes32,bytes32,bytes32,uint64,bytes),(bytes32,uint64,uint64,bytes32),(bytes32,uint64,uint64,uint64,uint64,uint64,bytes32,bytes32),(uint256,bytes32[]),(uint256,bytes32[]),bytes)"(
      message: {
        sender: BytesLike;
        recipient: BytesLike;
        nonce: BytesLike;
        amount: BigNumberish;
        data: BytesLike;
      },
      rootBlockHeader: {
        prevRoot: BytesLike;
        height: BigNumberish;
        timestamp: BigNumberish;
        applicationHash: BytesLike;
      },
      blockHeader: {
        prevRoot: BytesLike;
        height: BigNumberish;
        timestamp: BigNumberish;
        daHeight: BigNumberish;
        txCount: BigNumberish;
        outputMessagesCount: BigNumberish;
        txRoot: BytesLike;
        outputMessagesRoot: BytesLike;
      },
      blockInHistoryProof: { key: BigNumberish; proof: BytesLike[] },
      messageInBlockProof: { key: BigNumberish; proof: BytesLike[] },
      poaSignature: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "renounceOwnership()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    s_incomingMessageSuccessful(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "s_incomingMessageSuccessful(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    s_incomingMessageTimelock(overrides?: CallOverrides): Promise<[BigNumber]>;

    "s_incomingMessageTimelock()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    s_outgoingMessageNonce(overrides?: CallOverrides): Promise<[BigNumber]>;

    "s_outgoingMessageNonce()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    sendETH(
      recipient: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "sendETH(bytes32)"(
      recipient: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    sendMessage(
      recipient: BytesLike,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "sendMessage(bytes32,bytes)"(
      recipient: BytesLike,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setIncomingMessageTimelock(
      messageTimelock: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setIncomingMessageTimelock(uint64)"(
      messageTimelock: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "unpause()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  ETH_DECIMALS(overrides?: CallOverrides): Promise<BigNumber>;

  "ETH_DECIMALS()"(overrides?: CallOverrides): Promise<BigNumber>;

  FUEL_BASE_ASSET_DECIMALS(overrides?: CallOverrides): Promise<BigNumber>;

  "FUEL_BASE_ASSET_DECIMALS()"(overrides?: CallOverrides): Promise<BigNumber>;

  MAX_MESSAGE_DATA_SIZE(overrides?: CallOverrides): Promise<BigNumber>;

  "MAX_MESSAGE_DATA_SIZE()"(overrides?: CallOverrides): Promise<BigNumber>;

  SIDECHAIN_CONSENSUS(overrides?: CallOverrides): Promise<string>;

  "SIDECHAIN_CONSENSUS()"(overrides?: CallOverrides): Promise<string>;

  getFuelBaseAssetDecimals(overrides?: CallOverrides): Promise<number>;

  "getFuelBaseAssetDecimals()"(overrides?: CallOverrides): Promise<number>;

  getMessageSender(overrides?: CallOverrides): Promise<string>;

  "getMessageSender()"(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  pause(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "pause()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  "paused()"(overrides?: CallOverrides): Promise<boolean>;

  relayMessageFromFuelBlock(
    message: {
      sender: BytesLike;
      recipient: BytesLike;
      nonce: BytesLike;
      amount: BigNumberish;
      data: BytesLike;
    },
    blockHeader: {
      prevRoot: BytesLike;
      height: BigNumberish;
      timestamp: BigNumberish;
      daHeight: BigNumberish;
      txCount: BigNumberish;
      outputMessagesCount: BigNumberish;
      txRoot: BytesLike;
      outputMessagesRoot: BytesLike;
    },
    messageInBlockProof: { key: BigNumberish; proof: BytesLike[] },
    poaSignature: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "relayMessageFromFuelBlock((bytes32,bytes32,bytes32,uint64,bytes),(bytes32,uint64,uint64,uint64,uint64,uint64,bytes32,bytes32),(uint256,bytes32[]),bytes)"(
    message: {
      sender: BytesLike;
      recipient: BytesLike;
      nonce: BytesLike;
      amount: BigNumberish;
      data: BytesLike;
    },
    blockHeader: {
      prevRoot: BytesLike;
      height: BigNumberish;
      timestamp: BigNumberish;
      daHeight: BigNumberish;
      txCount: BigNumberish;
      outputMessagesCount: BigNumberish;
      txRoot: BytesLike;
      outputMessagesRoot: BytesLike;
    },
    messageInBlockProof: { key: BigNumberish; proof: BytesLike[] },
    poaSignature: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  relayMessageFromPrevFuelBlock(
    message: {
      sender: BytesLike;
      recipient: BytesLike;
      nonce: BytesLike;
      amount: BigNumberish;
      data: BytesLike;
    },
    rootBlockHeader: {
      prevRoot: BytesLike;
      height: BigNumberish;
      timestamp: BigNumberish;
      applicationHash: BytesLike;
    },
    blockHeader: {
      prevRoot: BytesLike;
      height: BigNumberish;
      timestamp: BigNumberish;
      daHeight: BigNumberish;
      txCount: BigNumberish;
      outputMessagesCount: BigNumberish;
      txRoot: BytesLike;
      outputMessagesRoot: BytesLike;
    },
    blockInHistoryProof: { key: BigNumberish; proof: BytesLike[] },
    messageInBlockProof: { key: BigNumberish; proof: BytesLike[] },
    poaSignature: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "relayMessageFromPrevFuelBlock((bytes32,bytes32,bytes32,uint64,bytes),(bytes32,uint64,uint64,bytes32),(bytes32,uint64,uint64,uint64,uint64,uint64,bytes32,bytes32),(uint256,bytes32[]),(uint256,bytes32[]),bytes)"(
    message: {
      sender: BytesLike;
      recipient: BytesLike;
      nonce: BytesLike;
      amount: BigNumberish;
      data: BytesLike;
    },
    rootBlockHeader: {
      prevRoot: BytesLike;
      height: BigNumberish;
      timestamp: BigNumberish;
      applicationHash: BytesLike;
    },
    blockHeader: {
      prevRoot: BytesLike;
      height: BigNumberish;
      timestamp: BigNumberish;
      daHeight: BigNumberish;
      txCount: BigNumberish;
      outputMessagesCount: BigNumberish;
      txRoot: BytesLike;
      outputMessagesRoot: BytesLike;
    },
    blockInHistoryProof: { key: BigNumberish; proof: BytesLike[] },
    messageInBlockProof: { key: BigNumberish; proof: BytesLike[] },
    poaSignature: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "renounceOwnership()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  s_incomingMessageSuccessful(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "s_incomingMessageSuccessful(bytes32)"(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  s_incomingMessageTimelock(overrides?: CallOverrides): Promise<BigNumber>;

  "s_incomingMessageTimelock()"(overrides?: CallOverrides): Promise<BigNumber>;

  s_outgoingMessageNonce(overrides?: CallOverrides): Promise<BigNumber>;

  "s_outgoingMessageNonce()"(overrides?: CallOverrides): Promise<BigNumber>;

  sendETH(
    recipient: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "sendETH(bytes32)"(
    recipient: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  sendMessage(
    recipient: BytesLike,
    data: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "sendMessage(bytes32,bytes)"(
    recipient: BytesLike,
    data: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setIncomingMessageTimelock(
    messageTimelock: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setIncomingMessageTimelock(uint64)"(
    messageTimelock: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "transferOwnership(address)"(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unpause(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "unpause()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    ETH_DECIMALS(overrides?: CallOverrides): Promise<BigNumber>;

    "ETH_DECIMALS()"(overrides?: CallOverrides): Promise<BigNumber>;

    FUEL_BASE_ASSET_DECIMALS(overrides?: CallOverrides): Promise<BigNumber>;

    "FUEL_BASE_ASSET_DECIMALS()"(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_MESSAGE_DATA_SIZE(overrides?: CallOverrides): Promise<BigNumber>;

    "MAX_MESSAGE_DATA_SIZE()"(overrides?: CallOverrides): Promise<BigNumber>;

    SIDECHAIN_CONSENSUS(overrides?: CallOverrides): Promise<string>;

    "SIDECHAIN_CONSENSUS()"(overrides?: CallOverrides): Promise<string>;

    getFuelBaseAssetDecimals(overrides?: CallOverrides): Promise<number>;

    "getFuelBaseAssetDecimals()"(overrides?: CallOverrides): Promise<number>;

    getMessageSender(overrides?: CallOverrides): Promise<string>;

    "getMessageSender()"(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    pause(overrides?: CallOverrides): Promise<void>;

    "pause()"(overrides?: CallOverrides): Promise<void>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    "paused()"(overrides?: CallOverrides): Promise<boolean>;

    relayMessageFromFuelBlock(
      message: {
        sender: BytesLike;
        recipient: BytesLike;
        nonce: BytesLike;
        amount: BigNumberish;
        data: BytesLike;
      },
      blockHeader: {
        prevRoot: BytesLike;
        height: BigNumberish;
        timestamp: BigNumberish;
        daHeight: BigNumberish;
        txCount: BigNumberish;
        outputMessagesCount: BigNumberish;
        txRoot: BytesLike;
        outputMessagesRoot: BytesLike;
      },
      messageInBlockProof: { key: BigNumberish; proof: BytesLike[] },
      poaSignature: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "relayMessageFromFuelBlock((bytes32,bytes32,bytes32,uint64,bytes),(bytes32,uint64,uint64,uint64,uint64,uint64,bytes32,bytes32),(uint256,bytes32[]),bytes)"(
      message: {
        sender: BytesLike;
        recipient: BytesLike;
        nonce: BytesLike;
        amount: BigNumberish;
        data: BytesLike;
      },
      blockHeader: {
        prevRoot: BytesLike;
        height: BigNumberish;
        timestamp: BigNumberish;
        daHeight: BigNumberish;
        txCount: BigNumberish;
        outputMessagesCount: BigNumberish;
        txRoot: BytesLike;
        outputMessagesRoot: BytesLike;
      },
      messageInBlockProof: { key: BigNumberish; proof: BytesLike[] },
      poaSignature: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    relayMessageFromPrevFuelBlock(
      message: {
        sender: BytesLike;
        recipient: BytesLike;
        nonce: BytesLike;
        amount: BigNumberish;
        data: BytesLike;
      },
      rootBlockHeader: {
        prevRoot: BytesLike;
        height: BigNumberish;
        timestamp: BigNumberish;
        applicationHash: BytesLike;
      },
      blockHeader: {
        prevRoot: BytesLike;
        height: BigNumberish;
        timestamp: BigNumberish;
        daHeight: BigNumberish;
        txCount: BigNumberish;
        outputMessagesCount: BigNumberish;
        txRoot: BytesLike;
        outputMessagesRoot: BytesLike;
      },
      blockInHistoryProof: { key: BigNumberish; proof: BytesLike[] },
      messageInBlockProof: { key: BigNumberish; proof: BytesLike[] },
      poaSignature: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "relayMessageFromPrevFuelBlock((bytes32,bytes32,bytes32,uint64,bytes),(bytes32,uint64,uint64,bytes32),(bytes32,uint64,uint64,uint64,uint64,uint64,bytes32,bytes32),(uint256,bytes32[]),(uint256,bytes32[]),bytes)"(
      message: {
        sender: BytesLike;
        recipient: BytesLike;
        nonce: BytesLike;
        amount: BigNumberish;
        data: BytesLike;
      },
      rootBlockHeader: {
        prevRoot: BytesLike;
        height: BigNumberish;
        timestamp: BigNumberish;
        applicationHash: BytesLike;
      },
      blockHeader: {
        prevRoot: BytesLike;
        height: BigNumberish;
        timestamp: BigNumberish;
        daHeight: BigNumberish;
        txCount: BigNumberish;
        outputMessagesCount: BigNumberish;
        txRoot: BytesLike;
        outputMessagesRoot: BytesLike;
      },
      blockInHistoryProof: { key: BigNumberish; proof: BytesLike[] },
      messageInBlockProof: { key: BigNumberish; proof: BytesLike[] },
      poaSignature: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    "renounceOwnership()"(overrides?: CallOverrides): Promise<void>;

    s_incomingMessageSuccessful(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "s_incomingMessageSuccessful(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    s_incomingMessageTimelock(overrides?: CallOverrides): Promise<BigNumber>;

    "s_incomingMessageTimelock()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    s_outgoingMessageNonce(overrides?: CallOverrides): Promise<BigNumber>;

    "s_outgoingMessageNonce()"(overrides?: CallOverrides): Promise<BigNumber>;

    sendETH(recipient: BytesLike, overrides?: CallOverrides): Promise<void>;

    "sendETH(bytes32)"(
      recipient: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    sendMessage(
      recipient: BytesLike,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "sendMessage(bytes32,bytes)"(
      recipient: BytesLike,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    setIncomingMessageTimelock(
      messageTimelock: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setIncomingMessageTimelock(uint64)"(
      messageTimelock: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    unpause(overrides?: CallOverrides): Promise<void>;

    "unpause()"(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    Paused(account: null): TypedEventFilter<[string], { account: string }>;

    SentMessage(
      sender: BytesLike | null,
      recipient: BytesLike | null,
      nonce: null,
      amount: null,
      data: null
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber, string],
      {
        sender: string;
        recipient: string;
        nonce: BigNumber;
        amount: BigNumber;
        data: string;
      }
    >;

    Unpaused(account: null): TypedEventFilter<[string], { account: string }>;
  };

  estimateGas: {
    ETH_DECIMALS(overrides?: CallOverrides): Promise<BigNumber>;

    "ETH_DECIMALS()"(overrides?: CallOverrides): Promise<BigNumber>;

    FUEL_BASE_ASSET_DECIMALS(overrides?: CallOverrides): Promise<BigNumber>;

    "FUEL_BASE_ASSET_DECIMALS()"(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_MESSAGE_DATA_SIZE(overrides?: CallOverrides): Promise<BigNumber>;

    "MAX_MESSAGE_DATA_SIZE()"(overrides?: CallOverrides): Promise<BigNumber>;

    SIDECHAIN_CONSENSUS(overrides?: CallOverrides): Promise<BigNumber>;

    "SIDECHAIN_CONSENSUS()"(overrides?: CallOverrides): Promise<BigNumber>;

    getFuelBaseAssetDecimals(overrides?: CallOverrides): Promise<BigNumber>;

    "getFuelBaseAssetDecimals()"(overrides?: CallOverrides): Promise<BigNumber>;

    getMessageSender(overrides?: CallOverrides): Promise<BigNumber>;

    "getMessageSender()"(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "pause()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    "paused()"(overrides?: CallOverrides): Promise<BigNumber>;

    relayMessageFromFuelBlock(
      message: {
        sender: BytesLike;
        recipient: BytesLike;
        nonce: BytesLike;
        amount: BigNumberish;
        data: BytesLike;
      },
      blockHeader: {
        prevRoot: BytesLike;
        height: BigNumberish;
        timestamp: BigNumberish;
        daHeight: BigNumberish;
        txCount: BigNumberish;
        outputMessagesCount: BigNumberish;
        txRoot: BytesLike;
        outputMessagesRoot: BytesLike;
      },
      messageInBlockProof: { key: BigNumberish; proof: BytesLike[] },
      poaSignature: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "relayMessageFromFuelBlock((bytes32,bytes32,bytes32,uint64,bytes),(bytes32,uint64,uint64,uint64,uint64,uint64,bytes32,bytes32),(uint256,bytes32[]),bytes)"(
      message: {
        sender: BytesLike;
        recipient: BytesLike;
        nonce: BytesLike;
        amount: BigNumberish;
        data: BytesLike;
      },
      blockHeader: {
        prevRoot: BytesLike;
        height: BigNumberish;
        timestamp: BigNumberish;
        daHeight: BigNumberish;
        txCount: BigNumberish;
        outputMessagesCount: BigNumberish;
        txRoot: BytesLike;
        outputMessagesRoot: BytesLike;
      },
      messageInBlockProof: { key: BigNumberish; proof: BytesLike[] },
      poaSignature: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    relayMessageFromPrevFuelBlock(
      message: {
        sender: BytesLike;
        recipient: BytesLike;
        nonce: BytesLike;
        amount: BigNumberish;
        data: BytesLike;
      },
      rootBlockHeader: {
        prevRoot: BytesLike;
        height: BigNumberish;
        timestamp: BigNumberish;
        applicationHash: BytesLike;
      },
      blockHeader: {
        prevRoot: BytesLike;
        height: BigNumberish;
        timestamp: BigNumberish;
        daHeight: BigNumberish;
        txCount: BigNumberish;
        outputMessagesCount: BigNumberish;
        txRoot: BytesLike;
        outputMessagesRoot: BytesLike;
      },
      blockInHistoryProof: { key: BigNumberish; proof: BytesLike[] },
      messageInBlockProof: { key: BigNumberish; proof: BytesLike[] },
      poaSignature: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "relayMessageFromPrevFuelBlock((bytes32,bytes32,bytes32,uint64,bytes),(bytes32,uint64,uint64,bytes32),(bytes32,uint64,uint64,uint64,uint64,uint64,bytes32,bytes32),(uint256,bytes32[]),(uint256,bytes32[]),bytes)"(
      message: {
        sender: BytesLike;
        recipient: BytesLike;
        nonce: BytesLike;
        amount: BigNumberish;
        data: BytesLike;
      },
      rootBlockHeader: {
        prevRoot: BytesLike;
        height: BigNumberish;
        timestamp: BigNumberish;
        applicationHash: BytesLike;
      },
      blockHeader: {
        prevRoot: BytesLike;
        height: BigNumberish;
        timestamp: BigNumberish;
        daHeight: BigNumberish;
        txCount: BigNumberish;
        outputMessagesCount: BigNumberish;
        txRoot: BytesLike;
        outputMessagesRoot: BytesLike;
      },
      blockInHistoryProof: { key: BigNumberish; proof: BytesLike[] },
      messageInBlockProof: { key: BigNumberish; proof: BytesLike[] },
      poaSignature: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "renounceOwnership()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    s_incomingMessageSuccessful(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "s_incomingMessageSuccessful(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    s_incomingMessageTimelock(overrides?: CallOverrides): Promise<BigNumber>;

    "s_incomingMessageTimelock()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    s_outgoingMessageNonce(overrides?: CallOverrides): Promise<BigNumber>;

    "s_outgoingMessageNonce()"(overrides?: CallOverrides): Promise<BigNumber>;

    sendETH(
      recipient: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "sendETH(bytes32)"(
      recipient: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    sendMessage(
      recipient: BytesLike,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "sendMessage(bytes32,bytes)"(
      recipient: BytesLike,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setIncomingMessageTimelock(
      messageTimelock: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setIncomingMessageTimelock(uint64)"(
      messageTimelock: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "unpause()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    ETH_DECIMALS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "ETH_DECIMALS()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    FUEL_BASE_ASSET_DECIMALS(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "FUEL_BASE_ASSET_DECIMALS()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    MAX_MESSAGE_DATA_SIZE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "MAX_MESSAGE_DATA_SIZE()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    SIDECHAIN_CONSENSUS(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "SIDECHAIN_CONSENSUS()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getFuelBaseAssetDecimals(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getFuelBaseAssetDecimals()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMessageSender(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getMessageSender()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "pause()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "paused()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    relayMessageFromFuelBlock(
      message: {
        sender: BytesLike;
        recipient: BytesLike;
        nonce: BytesLike;
        amount: BigNumberish;
        data: BytesLike;
      },
      blockHeader: {
        prevRoot: BytesLike;
        height: BigNumberish;
        timestamp: BigNumberish;
        daHeight: BigNumberish;
        txCount: BigNumberish;
        outputMessagesCount: BigNumberish;
        txRoot: BytesLike;
        outputMessagesRoot: BytesLike;
      },
      messageInBlockProof: { key: BigNumberish; proof: BytesLike[] },
      poaSignature: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "relayMessageFromFuelBlock((bytes32,bytes32,bytes32,uint64,bytes),(bytes32,uint64,uint64,uint64,uint64,uint64,bytes32,bytes32),(uint256,bytes32[]),bytes)"(
      message: {
        sender: BytesLike;
        recipient: BytesLike;
        nonce: BytesLike;
        amount: BigNumberish;
        data: BytesLike;
      },
      blockHeader: {
        prevRoot: BytesLike;
        height: BigNumberish;
        timestamp: BigNumberish;
        daHeight: BigNumberish;
        txCount: BigNumberish;
        outputMessagesCount: BigNumberish;
        txRoot: BytesLike;
        outputMessagesRoot: BytesLike;
      },
      messageInBlockProof: { key: BigNumberish; proof: BytesLike[] },
      poaSignature: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    relayMessageFromPrevFuelBlock(
      message: {
        sender: BytesLike;
        recipient: BytesLike;
        nonce: BytesLike;
        amount: BigNumberish;
        data: BytesLike;
      },
      rootBlockHeader: {
        prevRoot: BytesLike;
        height: BigNumberish;
        timestamp: BigNumberish;
        applicationHash: BytesLike;
      },
      blockHeader: {
        prevRoot: BytesLike;
        height: BigNumberish;
        timestamp: BigNumberish;
        daHeight: BigNumberish;
        txCount: BigNumberish;
        outputMessagesCount: BigNumberish;
        txRoot: BytesLike;
        outputMessagesRoot: BytesLike;
      },
      blockInHistoryProof: { key: BigNumberish; proof: BytesLike[] },
      messageInBlockProof: { key: BigNumberish; proof: BytesLike[] },
      poaSignature: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "relayMessageFromPrevFuelBlock((bytes32,bytes32,bytes32,uint64,bytes),(bytes32,uint64,uint64,bytes32),(bytes32,uint64,uint64,uint64,uint64,uint64,bytes32,bytes32),(uint256,bytes32[]),(uint256,bytes32[]),bytes)"(
      message: {
        sender: BytesLike;
        recipient: BytesLike;
        nonce: BytesLike;
        amount: BigNumberish;
        data: BytesLike;
      },
      rootBlockHeader: {
        prevRoot: BytesLike;
        height: BigNumberish;
        timestamp: BigNumberish;
        applicationHash: BytesLike;
      },
      blockHeader: {
        prevRoot: BytesLike;
        height: BigNumberish;
        timestamp: BigNumberish;
        daHeight: BigNumberish;
        txCount: BigNumberish;
        outputMessagesCount: BigNumberish;
        txRoot: BytesLike;
        outputMessagesRoot: BytesLike;
      },
      blockInHistoryProof: { key: BigNumberish; proof: BytesLike[] },
      messageInBlockProof: { key: BigNumberish; proof: BytesLike[] },
      poaSignature: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "renounceOwnership()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    s_incomingMessageSuccessful(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "s_incomingMessageSuccessful(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    s_incomingMessageTimelock(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "s_incomingMessageTimelock()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    s_outgoingMessageNonce(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "s_outgoingMessageNonce()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    sendETH(
      recipient: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "sendETH(bytes32)"(
      recipient: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    sendMessage(
      recipient: BytesLike,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "sendMessage(bytes32,bytes)"(
      recipient: BytesLike,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setIncomingMessageTimelock(
      messageTimelock: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setIncomingMessageTimelock(uint64)"(
      messageTimelock: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "unpause()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
